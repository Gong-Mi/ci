name: Build ANGLE - Android ARM64 (Using Local args.gn Template)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build_angle_android_arm64_local_args:
    runs-on: ubuntu-latest

    env:
      # 定义 API Level，envsubst 会用到
      TARGET_ANDROID_API_LEVEL: 23 # 确保这里设置了值
      # 定义模板文件相对于仓库根目录的路径
      ARGS_TEMPLATE_PATH: "angle_android_arm64.args.gn.template" # 修改为你实际的路径

    steps:
      - name: Checkout CI Repository (Gong-Mi/ci)
        uses: actions/checkout@v4
        # 默认检出到 $GITHUB_WORKSPACE

      # --- Setup depot_tools (与之前相同) ---
      - name: Cache depot_tools
        id: cache-depot-tools
        uses: actions/cache@v4
        with:
          path: depot_tools
          key: depot_tools-${{ runner.os }}
      - name: Clone depot_tools if not cached
        if: steps.cache-depot-tools.outputs.cache-hit != 'true'
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools
      - name: Add depot_tools to PATH
        run: echo "$(pwd)/depot_tools" >> $GITHUB_PATH

      # --- Get ANGLE Source (与之前类似) ---
      - name: Create ANGLE directory
        run: mkdir -p angle
      - name: Cache ANGLE Source + Dependencies
        id: cache-angle-source
        uses: actions/cache@v4
        with:
          path: angle
          key: angle-src-deps-${{ runner.os }}-gclient-${{ hashFiles('.gitmodules') }} # 或者其他合适的 key
          restore-keys: |
            angle-src-deps-${{ runner.os }}-gclient-
      - name: Configure gclient
        if: steps.cache-angle-source.outputs.cache-hit != 'true'
        working-directory: angle
        run: gclient config https://chromium.googlesource.com/angle/angle.git --unmanaged
      - name: Sync ANGLE Source Code and Dependencies (gclient sync)
        if: steps.cache-angle-source.outputs.cache-hit != 'true'
        working-directory: angle
        run: |
          gclient sync --with_branch_heads --with_tags --force --delete_unversioned_trees -j$(nproc)
          ls -d third_party/android* || echo "NDK/SDK check"

      # --- Install Host Build Dependencies (与之前相同) ---
      - name: Install Host Build Dependencies & envsubst
        working-directory: angle # 或者在外面运行 sudo apt-get
        run: |
          echo "Installing host dependencies and gettext (for envsubst)..."
          sudo apt-get update -y
          sudo apt-get install -y gettext # 安装 envsubst 工具
          # 继续安装 ANGLE 可能需要的其他 host 依赖
          if [ -f "build/install-build-deps.py" ]; then
            python3 build/install-build-deps.py --no-prompt
          fi

      # --- Prepare and Generate Build Files ---
      - name: Prepare ANGLE Build Directory
        run: mkdir -p angle/out/Android_ARM64

      - name: Prepare args.gn from Template
        run: |
          echo "Preparing args.gn from template: ${{ env.ARGS_TEMPLATE_PATH }}"
          ls -l ${{ env.ARGS_TEMPLATE_PATH }} # 确认模板文件存在
          # 使用 envsubst 替换模板中的 ${TARGET_ANDROID_API_LEVEL}
          envsubst < "${{ env.ARGS_TEMPLATE_PATH }}" > angle/out/Android_ARM64/args.gn
          echo "Generated angle/out/Android_ARM64/args.gn:"
          cat angle/out/Android_ARM64/args.gn

      - name: Configure ANGLE Build (GN - using prepared args.gn)
        working-directory: angle
        run: |
          # depot_tools (gn) should be in PATH
          # 不需要 --args 了，gn 会自动读取 out/Android_ARM64/args.gn
          gn gen out/Android_ARM64
          echo "GN generation complete (used args.gn)."

      # --- Build ANGLE (与之前相同) ---
      - name: Build ANGLE (Ninja) - Android ARM64
        working-directory: angle
        run: |
          # depot_tools (ninja) should be in PATH
          ninja -C out/Android_ARM64 angle_library -j$(nproc)
          echo "ANGLE library build finished."

      # --- Upload Artifact (与之前相同) ---
      - name: Upload Build Artifacts - Android ARM64
        uses: actions/upload-artifact@v4
        with:
          name: angle-android-arm64-release-local-args
          path: angle/out/Android_ARM64/libangle.so
          if-no-files-found: error