# 工作流名称
name: 构建 ANGLE - Android ARM64 (使用本地 args.gn 模板)

# 触发条件
on:
  push:
    branches: [ "main" ] # 推送到 main 分支时触发
  pull_request:
    branches: [ "main" ] # 向 main 分支发起 Pull Request 时触发
  workflow_dispatch: # 允许在 GitHub Actions UI 上手动触发

jobs:
  build_angle_android_arm64_local_args:
    # Job 的显示名称
    name: 构建 ANGLE Android ARM64 (本地模板)
    # 运行环境
    runs-on: ubuntu-latest

    # 环境变量
    env:
      # 定义目标 Android API Level，供 envsubst 在模板替换时使用
      # *** 请根据需要调整此值，确保与你的 args.gn.template 中的预期值匹配 ***
      TARGET_ANDROID_API_LEVEL: 23 # <-- 示例值，请根据你的模板和需求调整
      # 定义 args.gn 模板文件相对于仓库根目录的路径
      # *** 重要提示：请务必根据你的模板文件实际位置修改此路径！***
      ARGS_TEMPLATE_PATH: "angle_android_arm64.args.gn.template" # <-- *** 修改这里，指向你的模板文件 ***

    steps:
      # 步骤 1: 检出 CI 仓库 (包含工作流和模板文件)
      - name: 检出 CI 仓库 (包含工作流和模板文件)
        uses: actions/checkout@v4
        # 此步骤检出包含此工作流文件 (.github/workflows/...) 的仓库。
        # 你的模板文件 (ARGS_TEMPLATE_PATH) 应位于此仓库 ($GITHUB_WORKSPACE) 中。

      # --- 设置 depot_tools ---
      # 步骤 2: 缓存 depot_tools
      - name: 缓存 depot_tools
        id: cache-depot-tools
        uses: actions/cache@v4
        with:
          path: depot_tools
          key: depot_tools-${{ runner.os }}

      # 步骤 3: 如果缓存未命中则克隆 depot_tools
      - name: 如果缓存未命中则克隆 depot_tools
        if: steps.cache-depot-tools.outputs.cache-hit != 'true'
        run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git depot_tools

      # 步骤 4: 添加 depot_tools 到 PATH 环境变量
      - name: 添加 depot_tools 到 PATH 环境变量
        run: echo "$(pwd)/depot_tools" >> $GITHUB_PATH
        shell: bash

      # --- 获取 ANGLE 源码 ---
      # !! 注意：不再手动创建 'angle' 目录 !!

      # 步骤 5: 缓存 ANGLE 源码及依赖
      # (缓存路径现在是 gclient sync 将创建的目录, 默认为 'angle')
      - name: 缓存 ANGLE 源码及依赖
        id: cache-angle-source
        uses: actions/cache@v4
        with:
          path: angle # <-- 缓存名为 'angle' 的目录 (由 gclient sync 创建)
          # 使用基于提交 SHA 的键，确保每次代码变更都重新同步
          key: angle-src-deps-${{ runner.os }}-gclient-${{ github.sha }}
          # 恢复键前缀，允许恢复旧缓存（可能过时）
          restore-keys: |
            angle-src-deps-${{ runner.os }}-gclient-

      # 步骤 6: 配置 gclient (如果缓存未命中)
      # (在仓库根目录执行, 让 gclient 将 ANGLE 检出到 'angle' 目录)
      - name: 配置 gclient (如果缓存未命中)
        if: steps.cache-angle-source.outputs.cache-hit != 'true'
        # working-directory: . # (默认在仓库根目录执行)
        run: |
          echo "配置 gclient 以获取 ANGLE 源码到 'angle' 目录..."
          # 配置 gclient，指定源码 URL 和要创建的目录名 (--name=angle)
          # 移除 --unmanaged，让 gclient 管理 ANGLE 源码检出
          gclient config https://chromium.googlesource.com/angle/angle.git --name=angle
          # *** 重要：在 .gclient 文件中添加 target_os = ['android'] ***
          # 这会告诉 gclient sync 运行时需要包含 Android 相关的依赖和运行相应的 hooks
          echo "target_os = ['android']" >> .gclient
          echo "已配置 .gclient 文件内容:"
          cat .gclient
          echo "---------------------"
        shell: bash

      # 步骤 7: 同步 ANGLE 源码和依赖 (gclient sync) (如果缓存未命中)
      # (在仓库根目录执行, gclient 会创建/更新 'angle' 目录)
      - name: 同步 ANGLE 源码和依赖 (gclient sync) (如果缓存未命中)
        if: steps.cache-angle-source.outputs.cache-hit != 'true'
        # working-directory: . # (默认在仓库根目录执行)
        run: |
          echo "缓存未命中或无效。正在运行 gclient sync (这可能需要一些时间)..."
          # gclient sync 现在会在当前目录下创建/更新 'angle' 目录，并拉取 Android 依赖
          gclient sync --with_branch_heads --with_tags --force --reset --delete_unversioned_trees -j$(nproc)
          echo "gclient sync 完成。"
          # *** 验证 ANGLE 源码根文件和 Android 工具链 ***
          echo "检查 .gn 文件是否存在于 'angle' 目录..."
          ls angle/.gn || (echo "错误：'angle/.gn' 文件在 sync 后仍然缺失！请检查 gclient config 和 sync 日志。" && exit 1)
          echo ".gn 文件存在于 angle 目录。"
          echo "检查 Android SDK/NDK 目录是否存在于 'angle/third_party'..."
          ls -d angle/third_party/android* || echo "警告：在 'angle/third_party' 中未找到预期的 Android SDK/NDK 目录。请检查 gclient sync 日志和 .gclient 配置。"
        shell: bash

      # --- 安装宿主机构建依赖 ---
      # 步骤 8: 安装宿主机构建依赖和 envsubst 工具
      - name: 安装宿主机构建依赖和 envsubst 工具
        run: |
          echo "正在安装宿主机依赖和 gettext (用于 envsubst)..."
          sudo apt-get update -y
          sudo apt-get install -y gettext-base # 安装 envsubst 工具
          # 检查并运行 ANGLE 的依赖安装脚本 (注意脚本路径已更新)
          if [ -f "angle/build/install-build-deps.py" ]; then
            echo "正在运行 ANGLE 的 install-build-deps.py 脚本 (位于 angle 子目录)..."
            # 传递 --android 标志以安装 Android 构建所需的依赖
            python3 angle/build/install-build-deps.py --no-prompt --android
          else
            echo "未找到 angle/build/install-build-deps.py，跳过此步骤。"
            echo "请确保 Runner 环境已包含 Android 构建所需的所有宿主依赖。"
          fi
        shell: bash

      # --- 准备和生成构建文件 ---
      # 步骤 9: 准备 ANGLE 构建输出目录
      - name: 准备 ANGLE 构建输出目录
        run: mkdir -p angle/out/Android_ARM64
        shell: bash

      # 步骤 10: 从仓库中的模板文件准备 args.gn 文件
      # (将模板替换并写入 angle/out/Android_ARM64/args.gn)
      - name: 从模板准备 args.gn 文件
        run: |
          echo "正在从模板准备 args.gn 文件..."
          TEMPLATE_FILE="$GITHUB_WORKSPACE/${{ env.ARGS_TEMPLATE_PATH }}"
          OUTPUT_ARGS_FILE="angle/out/Android_ARM64/args.gn" # 输出路径不变

          echo "模板文件路径: $TEMPLATE_FILE"
          echo "输出 args.gn 路径: $OUTPUT_ARGS_FILE"
          echo "使用的 TARGET_ANDROID_API_LEVEL: ${{ env.TARGET_ANDROID_API_LEVEL }}"

          # 健壮性检查：确保模板文件确实存在
          if [ ! -f "$TEMPLATE_FILE" ]; then
            echo "错误：模板文件 '$TEMPLATE_FILE' 未找到！"
            echo "请检查 ARGS_TEMPLATE_PATH 环境变量 ('${{ env.ARGS_TEMPLATE_PATH }}') 是否正确设置，"
            echo "并确保该文件存在于你的仓库中相对于根目录的指定位置。"
            exit 1 # 终止工作流
          fi

          echo "找到模板文件。模板内容如下:"
          cat "$TEMPLATE_FILE"
          echo "---------------------"

          # 使用 envsubst 进行环境变量替换
          envsubst < "$TEMPLATE_FILE" > "$OUTPUT_ARGS_FILE"

          echo "已成功生成 ${OUTPUT_ARGS_FILE}。内容如下:"
          cat "$OUTPUT_ARGS_FILE"
          echo "---------------------"
        shell: bash

      # 步骤 11: 验证源码并配置 ANGLE 构建 (GN - 使用准备好的 args.gn)
      # *** 注意：需要切换到 'angle' 目录执行 gn 命令 ***
      - name: 验证源码并配置 ANGLE 构建 (GN - 使用准备好的 args.gn)
        working-directory: angle # <-- 切换到 angle 源码根目录执行 gn
        run: |
          echo "当前工作目录: $(pwd)"
          echo "检查 ANGLE 源码根目录下的 .gn 文件是否存在..."
          if [ ! -f ".gn" ]; then
             echo "错误：在 $(pwd) 中未找到 '.gn' 文件！"
             echo "这表示 ANGLE 源码检出失败或不完整。"
             exit 1
          fi
          echo ".gn 文件存在。"
          echo "---------------------"
          echo "正在运行 gn gen out/Android_ARM64..."
          # gn gen 会自动查找并读取位于输出目录 (out/Android_ARM64) 中的 args.gn 文件
          gn gen out/Android_ARM64
          echo "GN 生成步骤完成 (已使用从模板生成的 args.gn)。Ninja 构建文件已在 'out/Android_ARM64' 中生成。"
        shell: bash

      # --- 构建 ANGLE ---
      # 步骤 12: 使用 Ninja 构建 ANGLE 库
      # *** 注意：需要切换到 'angle' 目录执行 ninja 命令 ***
      - name: 构建 ANGLE (Ninja) - Android ARM64
        working-directory: angle # <-- 切换到 angle 源码根目录执行 ninja
        run: |
          echo "正在使用 Ninja 开始构建..."
          # *** 重要：确认 'angle_library' 是你想要构建的正确目标 ***
          # 你可以通过 `gn ls out/Android_ARM64` (在 gn gen 成功后) 查看所有可用的构建目标。
          # 常见的 ANGLE 目标可能包括 'angle_static', 'angle_shared', 'libEGL', 'libGLESv2' 等。
          # 请根据你的 args.gn 配置和需求修改这里的目标名称。
          BUILD_TARGET="angle_library" # <-- *** 修改这里为你需要的确切目标名称 ***

          echo "构建目标: ${BUILD_TARGET}"
          # -C 指定构建目录 (相对于当前工作目录，即 angle/out/Android_ARM64)
          # -j$(nproc) 使用所有可用的 CPU 核心并行构建
          ninja -C out/Android_ARM64 ${BUILD_TARGET} -j$(nproc)
          echo "Ninja 构建过程完成。"
        shell: bash

      # --- 上传构建产物 ---
      # 步骤 13: 将构建生成的库文件作为产物上传
      # (路径是相对于仓库根目录的，保持不变)
      - name: 上传构建产物 - Android ARM64
        uses: actions/upload-artifact@v4
        with:
          # 上传的产物包的名称
          name: angle-android-arm64-release-local-args
          # *** 重要：确认需要上传的文件的确切路径和名称 ***
          # 编译产物的名称和位置取决于你的 args.gn 配置和构建目标。
          # 'libangle.so' 是一个示例，请检查 `angle/out/Android_ARM64` 目录确认。
          path: angle/out/Android_ARM64/libangle.so # <-- *** 修改这里为实际的产物路径和名称 ***
          # 如果找不到要上传的文件，则将工作流标记为失败
          if-no-files-found: error