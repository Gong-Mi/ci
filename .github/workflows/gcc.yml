

name: 构建 GCC Magisk 模块

on:
  push:
    branches: [ main ] # 或者你的开发分支
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest # 必须使用 Linux 运行环境
    env: # 定义 Job 级别的环境变量,供所有步骤共享
      GCC_VERSION: "12.2.0"
      BINUTILS_VERSION: "2.39"
      GMP_VERSION: "6.2.1"
      MPFR_VERSION: "4.1.0"
      MPC_VERSION: "1.2.1"
      NDK_VERSION: "android-ndk-r27c" # NDK 版本 - 已更新
      TARGET_ARCH: "aarch64"          # 目标架构
      API_LEVEL: "30"                 # Android API Level (可以根据需要调高)

    steps:
    - name: 检出代码 (如果你的仓库包含辅助脚本/配置)
      uses: actions/checkout@v3

    - name: 安装基础依赖
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        sudo apt-get update
        sudo apt-get install -y build-essential wget unzip bc tar xz-utils texinfo # texinfo is often needed for make install
        echo "基础依赖安装完成。"

    - name: 设置 Android NDK
      id: setup-ndk
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        echo "正在下载 NDK ${NDK_VERSION}..." # 使用 env 中定义的 NDK_VERSION
        wget -q https://dl.google.com/android/repository/${NDK_VERSION}-linux.zip
        unzip -q ${NDK_VERSION}-linux.zip
        # 将 NDK 路径添加到后续步骤的 GitHub Actions 环境变量
        echo "ANDROID_NDK_HOME=${GITHUB_WORKSPACE}/${NDK_VERSION}" >> $GITHUB_ENV
        echo "NDK 路径: ${GITHUB_WORKSPACE}/${NDK_VERSION}"

    - name: 定义构建特定变量
      id: build-vars
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        # TARGET_ARCH 和 API_LEVEL 从 job.env 获取
        TARGET_TRIPLE="${TARGET_ARCH}-linux-android"
        # NDK Clang 通常需要 API Level 后缀
        TOOLCHAIN_TARGET="${TARGET_TRIPLE}${API_LEVEL}"
        # 临时安装目录的前缀
        INSTALL_PREFIX="${GITHUB_WORKSPACE}/install_dir"
        # Magisk 模块目录
        MODULE_DIR="${GITHUB_WORKSPACE}/gcc_magisk_module"
        # 根据架构确定库目录名
        if [ "${TARGET_ARCH}" == "aarch64" ] || [ "${TARGET_ARCH}" == "x86_64" ]; then
          LIB_DIR_NAME="lib64"
        else
          LIB_DIR_NAME="lib"
        fi

        # 将这些变量写入 GitHub Actions 环境变量供后续步骤使用
        echo "TARGET_TRIPLE=${TARGET_TRIPLE}" >> $GITHUB_ENV
        echo "TOOLCHAIN_TARGET=${TOOLCHAIN_TARGET}" >> $GITHUB_ENV
        echo "INSTALL_PREFIX=${INSTALL_PREFIX}" >> $GITHUB_ENV
        echo "MODULE_DIR=${MODULE_DIR}" >> $GITHUB_ENV
        echo "LIB_DIR_NAME=${LIB_DIR_NAME}" >> $GITHUB_ENV # 将库目录名也设为环境变量
        # 将 NDK 工具链添加到全局 PATH 环境变量 (主要影响后续步骤)
        # Prepend NDK path to ensure its tools are found first
        echo "PATH=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}" >> $GITHUB_ENV

        # 创建所需目录
        mkdir -p $INSTALL_PREFIX
        mkdir -p $MODULE_DIR
        echo "构建变量设置完成。"
        echo "INSTALL_PREFIX=${INSTALL_PREFIX}"
        echo "MODULE_DIR=${MODULE_DIR}"
        echo "TARGET_TRIPLE=${TARGET_TRIPLE}"
        echo "TOOLCHAIN_TARGET=${TOOLCHAIN_TARGET}"
        echo "LIB_DIR_NAME=${LIB_DIR_NAME}"
        echo "Initial PATH set in GITHUB_ENV: $PATH"

    - name: 下载源代码 (使用 env 中的版本号)
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        echo "正在下载源码..."
        echo "GCC Version: ${GCC_VERSION}"
        echo "Binutils Version: ${BINUTILS_VERSION}"
        echo "GMP Version: ${GMP_VERSION}"
        echo "MPFR Version: ${MPFR_VERSION}"
        echo "MPC Version: ${MPC_VERSION}"
        wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.gz
        wget -q https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.gz
        wget -q https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
        wget -q https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VERSION}.tar.xz
        wget -q https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz
        echo "下载完成,正在解压..."
        tar -xf gcc-${GCC_VERSION}.tar.gz
        tar -xf binutils-${BINUTILS_VERSION}.tar.gz
        tar -xf gmp-${GMP_VERSION}.tar.xz
        tar -xf mpfr-${MPFR_VERSION}.tar.xz
        tar -xf mpc-${MPC_VERSION}.tar.gz
        echo "解压完成。"
        echo "当前工作目录内容 (下载后):"
        ls -l # 列出文件以确认解压成功

    - name: 构建依赖项 (Binutils, GMP, MPFR, MPC)
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        echo "开始构建依赖项..."
        echo "Current PATH for dependency build: $PATH"
        echo "Current work dir: $(pwd)"
        ls -l

        NPROC=$(nproc)
        echo "Using $NPROC parallel jobs for make."

        # --- 确定构建机器类型 ---
        # 先运行一次 config.guess 并保存结果
        cd binutils-${BINUTILS_VERSION} # 需要在包含 config.guess 的目录中
        if [ ! -x ./config.guess ]; then
            echo "Error: ./config.guess 在 $(pwd) 中未找到或不可执行"
            # 如有必要，可尝试在其他地方查找或修复权限
            # 暂时假设它存在于解压后的目录中
            chmod +x ./config.guess || true # 尝试赋予执行权限以防万一
            if [ ! -x ./config.guess ]; then exit 1; fi # 如果仍然不可执行则退出
        fi
        BUILD_MACHINE=$(./config.guess)
        if [ -z "$BUILD_MACHINE" ]; then
            echo "Error: config.guess 未能确定构建机器的三元组 (triplet)。"
            exit 1
        fi
        echo "检测到的构建机器: $BUILD_MACHINE"
        cd .. # 返回上级目录

        # --- 构建 Binutils ---
        echo "构建 Binutils (版本: ${BINUTILS_VERSION})..."
        cd binutils-${BINUTILS_VERSION}

        # Binutils 需要在构建机器上运行，但目标是 Android 机器
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
        export NM="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm"

        echo "检查 Binutils 所需工具:"
        echo "CC is: $CC"
        $CC --version || { echo "CC check failed"; exit 1; }
        echo "AR is: $AR"
        ls -l "$AR"
        "$AR" --version || { echo "AR version check failed"; exit 1; }
        echo "NM is: $NM"
        ls -l "$NM"
        "$NM" --version || { echo "NM version check failed"; exit 1; }


        echo "--- 准备配置 Binutils ---"
        echo "PWD=$(pwd)"
        ls -l ./configure
        if [ ! -x ./configure ]; then
           echo "错误: configure脚本不存在或不可执行！"
           exit 1
        fi
        echo "即将运行 Configure 命令。"

        # 执行 Binutils 的 configure: host 是构建机器, target 是 android 机器
        # 使用前面捕获的 BUILD_MACHINE 变量
        ./configure --target=${TARGET_TRIPLE} --prefix=${INSTALL_PREFIX} \
                    --host=${BUILD_MACHINE} \  # 使用变量
                    --build=${BUILD_MACHINE} \ # 使用变量
                    --with-sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                    --disable-nls --disable-werror \
                    --disable-libctf \
                    --disable-gprofng \
                    --disable-static --enable-shared

        echo "运行 Binutils configure 完成。开始 make..."
        make -j${NPROC} || { echo "Binutils make failed"; exit 1; }
        make install || { echo "Binutils make install failed"; exit 1; }
        echo "Binutils 构建和安装完成。"
        cd ..
        echo "检查 Binutils 安装情况于 ${INSTALL_PREFIX}/bin:"
        ls -l ${INSTALL_PREFIX}/bin | grep ${TARGET_TRIPLE} || echo "警告: Binutils 工具可能未正确安装。"
        # 检查原生工具是否被构建 (使用 --host=build 时不应构建)
        ls -l ${INSTALL_PREFIX}/bin | grep $(echo $BUILD_MACHINE | sed 's/-pc-linux-gnu//')

        # --- 构建 GMP ---
        echo "构建 GMP (版本: ${GMP_VERSION})..."
        cd gmp-${GMP_VERSION}
        # GMP 需要在 ANDROID 机器上运行 (host)，使用交叉编译器构建
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" # 仍需构建机器的工具
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
         # 确保第一步安装的 Binutils 中的 'as', 'ld' 等能被找到
        export PATH="${INSTALL_PREFIX}/bin:${PATH}" # 确保交叉 binutils 在 PATH 中
        echo "用于 GMP 构建的当前 PATH: $PATH"

        # 为清晰起见，显式设置 --build，host 是目标系统
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} \
                     --build=${BUILD_MACHINE} \ # 添加显式的构建机器
                     --enable-cxx \
                     --disable-static --enable-shared
        echo "运行 GMP configure 完成。开始 make..."
        make -j${NPROC} || { echo "GMP make failed"; exit 1; }
        make install || { echo "GMP make install failed"; exit 1; }
        echo "GMP 构建和安装完成。"
        cd ..
        echo "检查 GMP 安装情况于 ${INSTALL_PREFIX}/include 和 ${INSTALL_PREFIX}/${LIB_DIR_NAME}:"
        ls -l ${INSTALL_PREFIX}/include/gmp*.h || echo "警告: GMP 头文件可能未正确安装。"
        ls -l ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libgmp.* || echo "警告: GMP 库可能未正确安装。"

        # --- 构建 MPFR ---
        echo "构建 MPFR (版本: ${MPFR_VERSION})..."
        cd mpfr-${MPFR_VERSION}
        # MPFR 需要在 ANDROID 机器上运行 (host)，使用交叉编译器构建
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" # 仍需构建机器的工具
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
        # PATH 应该仍然包含交叉 binutils

        # 为清晰起见，显式设置 --build，host 是目标系统
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} \
                    --build=${BUILD_MACHINE} \ # 添加显式的构建机器
                    --with-gmp=${INSTALL_PREFIX} \
                    --disable-static --enable-shared
        echo "运行 MPFR configure 完成。开始 make..."
        make -j${NPROC} || { echo "MPFR make failed"; exit 1; }
        make install || { echo "MPFR make install failed"; exit 1; }
        echo "MPFR 构建和安装完成。"
        cd ..
        echo "检查 MPFR 安装情况于 ${INSTALL_PREFIX}/include 和 ${INSTALL_PREFIX}/${LIB_DIR_NAME}:"
        ls -l ${INSTALL_PREFIX}/include/mpfr.h || echo "警告: MPFR 头文件可能未正确安装。"
        ls -l ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libmpfr.* || echo "警告: MPFR 库可能未正确安装。"

        # --- 构建 MPC ---
        echo "构建 MPC (版本: ${MPC_VERSION})..."
        cd mpc-${MPC_VERSION}
        # MPC 需要在 ANDROID 机器上运行 (host)，使用交叉编译器构建
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" # 仍需构建机器的工具
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
        # PATH 应该仍然包含交叉 binutils

        # 为清晰起见，显式设置 --build，host 是目标系统
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} \
                    --build=${BUILD_MACHINE} \ # 添加显式的构建机器
                    --with-gmp=${INSTALL_PREFIX} \
                    --with-mpfr=${INSTALL_PREFIX} \
                    --disable-static --enable-shared
        echo "运行 MPC configure 完成。开始 make..."
        make -j${NPROC} || { echo "MPC make failed"; exit 1; }
        make install || { echo "MPC make install failed"; exit 1; }
        echo "MPC 构建和安装完成。"
        cd ..
        echo "检查 MPC 安装情况于 ${INSTALL_PREFIX}/include 和 ${INSTALL_PREFIX}/${LIB_DIR_NAME}:"
        ls -l ${INSTALL_PREFIX}/include/mpc.h || echo "警告: MPC 头文件可能未正确安装。"
        ls -l ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libmpc.* || echo "警告: MPC 库可能未正确安装。"

        # 为后续步骤将最终安装路径添加到 PATH (确保添加)
        echo "为后续步骤将 ${INSTALL_PREFIX}/bin 添加到 PATH (再次确保)"
        echo "PATH=${INSTALL_PREFIX}/bin:${PATH}" >> $GITHUB_ENV
        # 为后续步骤将库路径添加到 LD_LIBRARY_PATH
        echo "为后续步骤将 ${INSTALL_PREFIX}/${LIB_DIR_NAME} 添加到 LD_LIBRARY_PATH"
        echo "LD_LIBRARY_PATH=${INSTALL_PREFIX}/${LIB_DIR_NAME}:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "依赖项构建步骤完成。"

    - name: 构建 GCC
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        echo "开始构建 GCC (版本: ${GCC_VERSION})..."
        # PATH 现在应包含上一步安装的交叉 Binutils
        echo "用于 GCC 构建的当前 PATH: $PATH"
        echo "用于 GCC 构建的当前 LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        # 确定构建机器类型（如果之前的步骤没有设置 BUILD_MACHINE 全局变量，则需要再次获取）
        # 为了安全起见，再次获取并检查
        if [ -z "$BUILD_MACHINE" ]; then
            cd gcc-${GCC_VERSION} # 需要 config.guess
            if [ ! -x ./config.guess ]; then
                echo "Error: ./config.guess 在 $(pwd) 中未找到或不可执行"
                chmod +x ./config.guess || true
                if [ ! -x ./config.guess ]; then exit 1; fi
            fi
            BUILD_MACHINE=$(./config.guess)
            cd ..
            if [ -z "$BUILD_MACHINE" ]; then
                echo "Error: config.guess 未能确定构建机器的三元组 (triplet)。"
                exit 1
            fi
            echo "再次检测到的构建机器: $BUILD_MACHINE"
        fi

        cd gcc-${GCC_VERSION}

        NPROC=$(nproc)
        echo "使用 $NPROC 个并行作业进行 make。"

        # GCC 需要在 ANDROID 机器上运行 (host) 并以 ANDROID 机器为目标 (target)
        # 它是从构建机器交叉编译的。
        # 使用上一步安装的交叉 Binutils (应该在 PATH 中)
        # 使用 NDK Clang 作为第一阶段编译器
        # export CC_FOR_BUILD="${TOOLCHAIN_TARGET}-clang" # 在 configure 中使用 --build 时，通常不需要这个
        # export CXX_FOR_BUILD="${TOOLCHAIN_TARGET}-clang++"

        # 最终编译器的工具 (这些是将被构建的)
        # 确保它们不会意外地拾取系统工具
        export AR_FOR_TARGET="${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ar"
        export RANLIB_FOR_TARGET="${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ranlib"
        export STRIP_FOR_TARGET="${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-strip"
        export NM_FOR_TARGET="${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-nm"
        export AS_FOR_TARGET="${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-as" # 应通过 PATH 找到，但显式指定更安全
        export LD_FOR_TARGET="${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ld" # 应通过 PATH 找到，但显式指定更安全

        # 设置用于 *构建* GCC 本身的编译器的环境变量
        # 这些应该是 NDK Clang (因为 build=BUILD_MACHINE)
        export CC="${TOOLCHAIN_TARGET}-clang" # 必须指向用于交叉编译的编译器
        export CXX="${TOOLCHAIN_TARGET}-clang++" # 必须指向用于交叉编译的编译器

        # LDFLAGS 指向安装的库目录
        export LDFLAGS="-L${INSTALL_PREFIX}/${LIB_DIR_NAME} -Wl,-rpath-link=${INSTALL_PREFIX}/${LIB_DIR_NAME}" # 添加 rpath-link 可能有帮助
        # CPPFLAGS 指向安装的头文件目录
        export CPPFLAGS="-I${INSTALL_PREFIX}/include"
        # Linker 可能需要显式的 sysroot 来查找运行时库? 如果需要则添加
        # 对于目标文件的链接选项
        export LDFLAGS_FOR_TARGET="-L${INSTALL_PREFIX}/${LIB_DIR_NAME} --sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        # 对于目标文件的编译选项
        export CPPFLAGS_FOR_TARGET="-I${INSTALL_PREFIX}/include --sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"

        # echo "Using build compiler: CC_FOR_BUILD=$CC_FOR_BUILD CXX_FOR_BUILD=$CXX_FOR_BUILD"
        echo "Using cross compiler: CC=$CC CXX=$CXX"
        echo "Using target tools: AR_FOR_TARGET=$AR_FOR_TARGET etc."
        echo "CPPFLAGS for GCC: $CPPFLAGS"
        echo "LDFLAGS for GCC: $LDFLAGS"
        echo "CPPFLAGS_FOR_TARGET for GCC: $CPPFLAGS_FOR_TARGET"
        echo "LDFLAGS_FOR_TARGET for GCC: $LDFLAGS_FOR_TARGET"

        # 检查将由 GCC configure/make 使用的工具
        echo "检查交叉编译器:"
        "$CC" --version || { echo "CC check failed"; exit 1; }
        echo "检查目标链接器:"
        ls -l "$LD_FOR_TARGET"
        "$LD_FOR_TARGET" --version || { echo "LD_FOR_TARGET version check failed"; exit 1; }


        echo "--- 准备配置 GCC ---"
        echo "PWD=$(pwd)"
        ls -l ./configure
        if [ ! -x ./configure ]; then
           echo "错误: configure脚本不存在或不可执行！"
           exit 1
        fi
        echo "即将运行 Configure 命令。"

        # 执行 GCC 的 configure: build 在构建机, host 在目标机, target 是目标机
        # 需要指向前一步安装的 Binutils
        # 使用正确的 build, host, target
        ./configure --target=${TARGET_TRIPLE} --prefix=${INSTALL_PREFIX} \
                    --host=${TARGET_TRIPLE} \    # <--- Host is the Android machine (where the compiler will run)
                    --build=${BUILD_MACHINE} \   # <--- Build is the build machine (where we are compiling)
                    --with-sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                    --with-gmp=${INSTALL_PREFIX} \
                    --with-mpfr=${INSTALL_PREFIX} \
                    --with-mpc=${INSTALL_PREFIX} \
                    --with-as=${AS_FOR_TARGET} \      # 显式指向已安装的 Binutils
                    --with-ld=${LD_FOR_TARGET} \      # 显式指向已安装的 Binutils
                    --with-nm=${NM_FOR_TARGET} \      # 显式指向
                    --with-objdump=${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-objdump \ # 显式指向
                    --with-ar=${AR_FOR_TARGET} \      # 显式指向
                    --with-ranlib=${RANLIB_FOR_TARGET} \ # 显式指向
                    --with-strip=${STRIP_FOR_TARGET} \ # 显式指向
                    CC_FOR_BUILD=$(which gcc) \      # <--- 使用构建机的原生 gcc 来构建构建工具 (如 genflags)
                    CXX_FOR_BUILD=$(which g++) \     # <--- 使用构建机的原生 g++
                    CC=${CC} \                       # <--- 交叉编译器 (编译目标代码)
                    CXX=${CXX} \                     # <--- 交叉编译器 (编译目标代码)
                    AR=${AR_FOR_TARGET} \            # <--- 目标归档器
                    RANLIB=${RANLIB_FOR_TARGET} \    # <--- 目标 ranlib
                    STRIP=${STRIP_FOR_TARGET} \      # <--- 目标 strip
                    NM=${NM_FOR_TARGET} \            # <--- 目标 nm
                    CFLAGS_FOR_TARGET="${CPPFLAGS_FOR_TARGET}" \ # 目标的 C 编译选项
                    CXXFLAGS_FOR_TARGET="${CPPFLAGS_FOR_TARGET}" \ # 目标的 C++ 编译选项
                    LDFLAGS_FOR_TARGET="${LDFLAGS_FOR_TARGET}" \ # 目标的链接选项
                    CPPFLAGS="${CPPFLAGS}" \         # 编译 GCC 自身所需的头文件路径
                    LDFLAGS="${LDFLAGS}" \           # 编译 GCC 自身所需的库路径
                    --enable-languages=c,c++ \
                    --disable-nls \
                    --disable-libssp \
                    --disable-libgomp \
                    --disable-libquadmath \
                    --disable-libsanitizer \
                    --disable-libatomic \
                    --disable-gprofng \
                    --disable-bootstrap \            # 禁用 bootstrap 加速构建
                    --disable-multilib \
                    --disable-static --enable-shared \
                    --enable-initfini-array          # 某些 Android 版本/设置需要
                    --enable-host-shared             # 构建宿主工具为共享库 (如果需要)

        echo "运行 GCC configure 完成。开始 make..."
        # GCC make 可能需要很长时间！
        make -j${NPROC} || { echo "GCC make failed"; exit 1; }
        # 只安装目标工具，而不是原生工具
        make install-strip || { echo "GCC make install failed"; exit 1; } # 使用 install-strip 减小大小

        echo "GCC 构建和安装完成。"
        cd ..
        echo "检查 GCC 安装情况于 ${INSTALL_PREFIX}/bin:"
        ls -l ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-gcc || echo "警告: GCC 编译器可能未正确安装。"

    - name: 创建 Magisk 模块结构
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        echo "创建 Magisk 模块结构..."
        MODULE_ID="gcc-cross-android-${TARGET_ARCH}"
        MODULE_NAME="GCC for Android (${TARGET_ARCH})"
        MODULE_VERSION="v${GCC_VERSION}"
        MODULE_AUTHOR="GitHub Actions CI"

        # 创建目录结构
        mkdir -p ${MODULE_DIR}/system/bin
        mkdir -p ${MODULE_DIR}/system/${LIB_DIR_NAME}
        # 需要复制实际的 GCC 安装路径，包含目标三元组
        # 内部结构通常是 $prefix/libexec/gcc/$target_triple/$version
        mkdir -p ${MODULE_DIR}/system/libexec/gcc/${TARGET_TRIPLE}/${GCC_VERSION}
        # $prefix/lib/gcc/$target_triple/$version 包含 libgcc.a 等
        mkdir -p ${MODULE_DIR}/system/lib/gcc/${TARGET_TRIPLE}/${GCC_VERSION}
        # $prefix/$target_triple/include and $prefix/$target_triple/lib
        mkdir -p ${MODULE_DIR}/system/${TARGET_TRIPLE}/include
        mkdir -p ${MODULE_DIR}/system/${TARGET_TRIPLE}/${LIB_DIR_NAME}
        mkdir -p ${MODULE_DIR}/META-INF/com/google/android

        echo "复制已安装的文件到模块目录..."
        copy_or_fail() {
            echo "Copying: $1 -> $2"
            cp -fv "$1" "$2" || { echo "错误: 无法复制 '$1' 到 '$2'. 安装步骤可能失败。"; exit 1; }
        }
        copy_dir_or_fail() {
            echo "Copying directory: $1 -> $2"
            # 使用 rsync 更稳健，特别是对于符号链接
            rsync -a --copy-links "$1/" "$2/" || { echo "错误: 无法复制目录 '$1' 到 '$2'. 安装步骤可能失败。"; exit 1; }
        }

        # 复制主要可执行文件 - 这些在 ${INSTALL_PREFIX}/bin
        # 我们希望在 /system/bin 中创建指向实际位置的符号链接或包装脚本
        # 为了简单起见，先直接复制，但最好是链接
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-gcc ${MODULE_DIR}/system/bin/gcc
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-g++ ${MODULE_DIR}/system/bin/g++
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-cpp ${MODULE_DIR}/system/bin/cpp
        # 复制 Binutils 工具 - 这些也在 ${INSTALL_PREFIX}/bin (来自 Binutils 安装步骤)
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-as ${MODULE_DIR}/system/bin/as
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ld ${MODULE_DIR}/system/bin/ld
        # 添加其他需要的 binutils (ar, ranlib, strip, objdump 等)
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ar ${MODULE_DIR}/system/bin/ar
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ranlib ${MODULE_DIR}/system/bin/ranlib
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-strip ${MODULE_DIR}/system/bin/strip
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-nm ${MODULE_DIR}/system/bin/nm
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-objdump ${MODULE_DIR}/system/bin/objdump
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-readelf ${MODULE_DIR}/system/bin/readelf
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-size ${MODULE_DIR}/system/bin/size
        copy_or_fail ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-strings ${MODULE_DIR}/system/bin/strings

        # 复制 GCC 内部工具 (关键) - 这些在 ${INSTALL_PREFIX}/libexec/gcc/...
        copy_dir_or_fail ${INSTALL_PREFIX}/libexec/gcc/${TARGET_TRIPLE}/${GCC_VERSION} ${MODULE_DIR}/system/libexec/gcc/${TARGET_TRIPLE}/${GCC_VERSION}/

        # 复制 GCC 支持库 (如 libgcc.a, libstdc++.a) - 在 ${INSTALL_PREFIX}/lib/gcc/...
        copy_dir_or_fail ${INSTALL_PREFIX}/lib/gcc/${TARGET_TRIPLE}/${GCC_VERSION} ${MODULE_DIR}/system/lib/gcc/${TARGET_TRIPLE}/${GCC_VERSION}/

        # 复制目标系统库 (如 crtbegin_so.o) 和头文件 - 在 ${INSTALL_PREFIX}/${TARGET_TRIPLE}/...
        # 注意：这些通常应该由 NDK 或系统本身提供，交叉编译器不应打包自己的 C 库或系统头文件。
        # 如果确实需要，谨慎复制。
        # copy_dir_or_fail ${INSTALL_PREFIX}/${TARGET_TRIPLE}/include ${MODULE_DIR}/system/${TARGET_TRIPLE}/include/
        # copy_dir_or_fail ${INSTALL_PREFIX}/${TARGET_TRIPLE}/lib ${MODULE_DIR}/system/${TARGET_TRIPLE}/${LIB_DIR_NAME}/ # 注意 lib vs lib64

        # 复制动态库 (运行 GCC 和编译程序所必需)
        # 使用 find 处理版本后缀
        echo "复制共享库..."
        find ${INSTALL_PREFIX}/${LIB_DIR_NAME}/ -maxdepth 1 -name 'libstdc++.so*' -exec cp -fv {} ${MODULE_DIR}/system/${LIB_DIR_NAME}/ \;
        find ${INSTALL_PREFIX}/${LIB_DIR_NAME}/ -maxdepth 1 -name 'libgcc_s.so*' -exec cp -fv {} ${MODULE_DIR}/system/${LIB_DIR_NAME}/ \;
        find ${INSTALL_PREFIX}/${LIB_DIR_NAME}/ -maxdepth 1 -name 'libgmp.so*' -exec cp -fv {} ${MODULE_DIR}/system/${LIB_DIR_NAME}/ \;
        find ${INSTALL_PREFIX}/${LIB_DIR_NAME}/ -maxdepth 1 -name 'libmpfr.so*' -exec cp -fv {} ${MODULE_DIR}/system/${LIB_DIR_NAME}/ \;
        find ${INSTALL_PREFIX}/${LIB_DIR_NAME}/ -maxdepth 1 -name 'libmpc.so*' -exec cp -fv {} ${MODULE_DIR}/system/${LIB_DIR_NAME}/ \;
        # 可能还需要复制 libintl, libiconv 等，取决于 configure 选项和依赖

        # 验证库是否已复制
        if [ -z "$(ls -A ${MODULE_DIR}/system/${LIB_DIR_NAME})" ]; then
           echo "警告: 未能复制任何共享库到 ${MODULE_DIR}/system/${LIB_DIR_NAME}"
           # 这个不一定是错误，因为有些可能没构建或不需要
        else
           echo "共享库复制完成:"
           ls -l ${MODULE_DIR}/system/${LIB_DIR_NAME}
        fi

        # 创建 module.prop 文件
        echo "创建 module.prop..."
        echo "id=${MODULE_ID}" > ${MODULE_DIR}/module.prop
        echo "name=${MODULE_NAME}" >> ${MODULE_DIR}/module.prop
        echo "version=${MODULE_VERSION}" >> ${MODULE_DIR}/module.prop
        # 生成一个简单的 versionCode，例如 12200 (基于 GCC 12.2.0)
        safe_version_code=$(echo $GCC_VERSION | awk -F. '{ printf "%d%02d%01d0\n", $1, $2, $3 }')
        echo "versionCode=${safe_version_code}" >> ${MODULE_DIR}/module.prop
        echo "author=${MODULE_AUTHOR}" >> ${MODULE_DIR}/module.prop
        echo "description=为 Android ${TARGET_ARCH} 交叉编译的 GCC ${GCC_VERSION} 工具链。安装到 /system。" >> ${MODULE_DIR}/module.prop
        echo "arch=${TARGET_ARCH}" >> ${MODULE_DIR}/module.prop
        echo "minMagisk=20400" >> ${MODULE_DIR}/module.prop # 指定最低 Magisk 版本 (可选)
        echo "updateJson=YOUR_UPDATE_JSON_URL" >> ${MODULE_DIR}/module.prop # 可选，用于在线更新

        # 创建 customize.sh (如果需要更复杂的安装逻辑)
        # echo "创建 customize.sh..."
        # echo '#!/system/bin/sh' > ${MODULE_DIR}/customize.sh
        # echo '#' >> ${MODULE_DIR}/customize.sh
        # echo 'SKIPUNZIP=1' >> ${MODULE_DIR}/customize.sh
        # echo '' >> ${MODULE_DIR}/customize.sh
        # echo 'unzip -o "$ZIPFILE" "system/*" -d $MODPATH >&2' >> ${MODULE_DIR}/customize.sh
        # echo '' >> ${MODULE_DIR}/customize.sh
        # echo '# 设置权限' >> ${MODULE_DIR}/customize.sh
        # echo 'set_perm_recursive $MODPATH/system/bin 755 755' >> ${MODULE_DIR}/customize.sh
        # echo 'set_perm_recursive $MODPATH/system/libexec 755 755' >> ${MODULE_DIR}/customize.sh
        # echo 'set_perm_recursive $MODPATH/system/lib* 644 644' >> ${MODULE_DIR}/customize.sh
        # echo 'set_perm $MODPATH/system/'${LIB_DIR_NAME}'/*so* 755 755' >> ${MODULE_DIR}/customize.sh # 动态库需要执行权限
        # chmod 755 ${MODULE_DIR}/customize.sh

        # 创建 META-INF 文件 (保持简单，让 Magisk 处理)
        echo "创建 META-INF 文件..."
        echo '#!/sbin/sh' > ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo '# Magisk stub' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'exec /system/bin/sh $VMLIB/update_binary_stub.sh' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        chmod 755 ${MODULE_DIR}/META-INF/com/google/android/update-binary
        # updater-script 通常是空的，除非你有非常特殊的安装需求
        touch ${MODULE_DIR}/META-INF/com/google/android/updater-script

        echo "模块结构创建完成。"
        echo "模块内容概览 (顶层):"
        ls -l ${MODULE_DIR}
        echo "模块 /system/bin 内容:"
        ls -l ${MODULE_DIR}/system/bin
        echo "模块 /system/${LIB_DIR_NAME} 内容:"
        ls -l ${MODULE_DIR}/system/${LIB_DIR_NAME}


    - name: 打包模块为 Zip 文件
      run: |
        #!/bin/bash
        set -e # Ensure script exits on error

        echo "开始打包 Zip 文件..."
        cd ${MODULE_DIR}
        # 确保文件名符合规范，例如移除 'v' 前缀
        ZIP_FILENAME="gcc-${GCC_VERSION}-android-${TARGET_ARCH}-magisk.zip"
        zip -r9 ${GITHUB_WORKSPACE}/${ZIP_FILENAME} . -x ".*" -x "__MACOSX"
        cd ${GITHUB_WORKSPACE}
        echo "Zip 文件打包完成: ${ZIP_FILENAME}"
        ls -l ${ZIP_FILENAME}
        # 将 zip 文件名保存到环境变量，以便上传步骤使用
        echo "MODULE_ZIP_NAME=${ZIP_FILENAME}" >> $GITHUB_ENV

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: gcc-magisk-module-${{ env.TARGET_ARCH }} # Artifact 名称
        path: ${{ github.workspace }}/${{ env.MODULE_ZIP_NAME }} # 使用变量指定要上传的文件
        if-no-files-found: error # 如果 zip 文件没找到则报错

