# .github/workflows/gcc-build-only.yml
name: 构建 GCC 工具链 (仅构建)

on:
  push:
    branches: [ main ] # 或者你的主要开发分支
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # --- Version Configuration ---
      GCC_VERSION: "12.2.0"
      BINUTILS_VERSION: "2.39"
      GMP_VERSION: "6.2.1"
      MPFR_VERSION: "4.1.0"
      MPC_VERSION: "1.2.1"
      # --- NDK Version ---
      NDK_VERSION: "android-ndk-r27c" # Using LTS for stability
      # --- Build Target Configuration ---
      TARGET_ARCH: "aarch64"
      API_LEVEL: "30"

    steps:
    # 1. Checkout Code
    - name: 检出代码
      uses: actions/checkout@v4

    # 2. Install Base Build Dependencies
    - name: 安装基础依赖
      run: |
        #!/bin/bash
        set -e
        echo ">>> Updating apt package list..."
        sudo apt-get update -qq
        echo ">>> Installing base build tools and libraries..."
        sudo apt-get install -y --no-install-recommends \
          build-essential wget unzip zip bc tar xz-utils texinfo rsync \
          libtool pkg-config autogen automake
        echo ">>> Base dependencies installed successfully."

    # 3. Download and Set Up Android NDK
    - name: 设置 Android NDK
      id: setup-ndk
      run: |
        #!/bin/bash
        set -e
        echo ">>> Downloading NDK ${NDK_VERSION}..."
        wget -q https://dl.google.com/android/repository/${NDK_VERSION}-linux.zip -O ${NDK_VERSION}-linux.zip
        echo ">>> Extracting NDK..."
        unzip -q ${NDK_VERSION}-linux.zip
        echo "ANDROID_NDK_HOME=${GITHUB_WORKSPACE}/${NDK_VERSION}" >> $GITHUB_ENV
        echo ">>> NDK path set: ${GITHUB_WORKSPACE}/${NDK_VERSION}"
        rm -f ${NDK_VERSION}-linux.zip

    # 4. Define and Export Build-Specific Variables
    - name: 定义构建特定变量
      id: build-vars
      run: |
        #!/bin/bash
        set -e
        echo ">>> Configuring build variables..."
        echo "Target Architecture: ${TARGET_ARCH}"
        echo "API Level: ${API_LEVEL}"
        echo "NDK Home: ${ANDROID_NDK_HOME}"

        case "${TARGET_ARCH}" in
          armv7a) TARGET_TRIPLE="armv7a-linux-androideabi"; LIB_DIR_NAME="lib" ;;
          aarch64) TARGET_TRIPLE="aarch64-linux-android"; LIB_DIR_NAME="lib64" ;;
          x86) TARGET_TRIPLE="i686-linux-android"; LIB_DIR_NAME="lib" ;;
          x86_64) TARGET_TRIPLE="x86_64-linux-android"; LIB_DIR_NAME="lib64" ;;
          *) echo "ERROR: Unsupported target architecture '${TARGET_ARCH}'" >&2; exit 1 ;;
        esac

        TOOLCHAIN_TARGET="${TARGET_TRIPLE}${API_LEVEL}"
        INSTALL_PREFIX="${GITHUB_WORKSPACE}/install_dir" # Installation directory
        NDK_SYSROOT="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
        NDK_TOOLCHAIN_PATH="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"

        echo "TARGET_TRIPLE=${TARGET_TRIPLE}" >> $GITHUB_ENV
        echo "TOOLCHAIN_TARGET=${TOOLCHAIN_TARGET}" >> $GITHUB_ENV
        echo "INSTALL_PREFIX=${INSTALL_PREFIX}" >> $GITHUB_ENV
        echo "LIB_DIR_NAME=${LIB_DIR_NAME}" >> $GITHUB_ENV
        echo "NDK_SYSROOT=${NDK_SYSROOT}" >> $GITHUB_ENV
        echo "NDK_TOOLCHAIN_PATH=${NDK_TOOLCHAIN_PATH}" >> $GITHUB_ENV

        mkdir -p "${INSTALL_PREFIX}/bin"
        mkdir -p "${INSTALL_PREFIX}/${LIB_DIR_NAME}"
        mkdir -p "${INSTALL_PREFIX}/include"

        # Update PATH for current script and subsequent steps
        export PATH="${NDK_TOOLCHAIN_PATH}:${INSTALL_PREFIX}/bin:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV

        # Update LD_LIBRARY_PATH for current script and subsequent steps
        export LD_LIBRARY_PATH="${INSTALL_PREFIX}/${LIB_DIR_NAME}:${LD_LIBRARY_PATH}"
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV

        echo ">>> Build variables configured:"
        echo "  INSTALL_PREFIX=${INSTALL_PREFIX}"
        echo "  Current PATH for this step: ${PATH}" # Debug output

        echo ">>> Checking NDK Clang (${TOOLCHAIN_TARGET}-clang)..."
        if ! command -v "${TOOLCHAIN_TARGET}-clang" &> /dev/null; then
            echo "ERROR: NDK Clang (${TOOLCHAIN_TARGET}-clang) not found in PATH." >&2
            echo "Search PATH: ${PATH}" >&2
            ls -l "${NDK_TOOLCHAIN_PATH}" | grep clang || echo "Clang not found in NDK toolchain bin dir" >&2
            exit 1
        fi
        echo ">>> NDK Clang found: $(${TOOLCHAIN_TARGET}-clang --version | head -n 1)"

    # 5. Download All Source Code
    - name: 下载源代码
      run: |
        #!/bin/bash
        set -e
        echo ">>> Downloading sources..."
        wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.gz
        wget -q https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.gz
        wget -q https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
        wget -q https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VERSION}.tar.xz
        wget -q https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz
        echo ">>> Downloads complete. Extracting..."
        tar -xf gcc-${GCC_VERSION}.tar.gz
        tar -xf binutils-${BINUTILS_VERSION}.tar.gz
        tar -xf gmp-${GMP_VERSION}.tar.xz
        tar -xf mpfr-${MPFR_VERSION}.tar.xz
        tar -xf mpc-${MPC_VERSION}.tar.gz
        echo ">>> Extraction complete."

    # 6. Build Dependencies (Binutils, GMP, MPFR, MPC) - Cross-Compiled
    - name: 构建依赖项 (Binutils, GMP, MPFR, MPC)
      run: |
        #!/bin/bash
        set -e
        echo ">>> Starting build of dependencies (cross-compiling)..."
        # PATH and LD_LIBRARY_PATH are inherited from GITHUB_ENV set in step 4
        echo "Build PATH: $PATH"
        echo "Build LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        NPROC=$(nproc)
        echo "Using $NPROC parallel jobs for make."
        BUILD_MACHINE=$(./gcc-${GCC_VERSION}/config.guess)
        export BUILD_MACHINE
        echo "Detected Build Machine (Build): $BUILD_MACHINE"
        echo "Target Machine (Host/Target): $TARGET_TRIPLE"

        # --- Native Tools for Binutils Build ---
        NATIVE_CC=$(command -v gcc)
        NATIVE_CXX=$(command -v g++)
        NATIVE_AR=$(command -v ar)
        NATIVE_RANLIB=$(command -v ranlib)
        echo "Using Native CC for Binutils: ${NATIVE_CC}"

        # --- Cross Tools for GMP, MPFR, MPC Build ---
        CROSS_CC="${TOOLCHAIN_TARGET}-clang"
        CROSS_CXX="${TOOLCHAIN_TARGET}-clang++"
        CROSS_AR="${NDK_TOOLCHAIN_PATH}/llvm-ar"
        CROSS_RANLIB="${NDK_TOOLCHAIN_PATH}/llvm-ranlib"
        CROSS_STRIP="${NDK_TOOLCHAIN_PATH}/llvm-strip"
        CROSS_NM="${NDK_TOOLCHAIN_PATH}/llvm-nm"
        echo "Using Cross CC for Libraries: ${CROSS_CC}"

        # --- Build Binutils ---
        echo ">>> Building Binutils ${BINUTILS_VERSION} (using native compiler)..."
        cd binutils-${BINUTILS_VERSION}
        # Configure using NATIVE compiler because --host is the build machine
        # Added --disable-libctf to avoid linking errors
        ./configure --target=${TARGET_TRIPLE} --host=${BUILD_MACHINE} --build=${BUILD_MACHINE} \
                    --prefix=${INSTALL_PREFIX} --with-sysroot=${NDK_SYSROOT} \
                    --disable-nls --disable-werror --disable-gprofng \
                    --disable-libctf \
                    --enable-shared --disable-static \
                    CC="${NATIVE_CC}" CXX="${NATIVE_CXX}" AR="${NATIVE_AR}" RANLIB="${NATIVE_RANLIB}" # Use NATIVE tools
        make -j${NPROC} && make install || { echo "ERROR: Binutils build failed" >&2; exit 1; }
        cd ..
        echo ">>> Binutils build complete."

        # --- IMPORTANT: Update PATH again for this script AND subsequent steps ---
        # Now the actual Binutils tools are installed in ${INSTALL_PREFIX}/bin
        export PATH="${INSTALL_PREFIX}/bin:${PATH}"
        echo "PATH=${PATH}" >> $GITHUB_ENV
        echo ">>> Updated PATH to prioritize newly built Binutils: ${PATH}"
        if ! command -v "${TARGET_TRIPLE}-as" &> /dev/null; then
            echo "ERROR: Cannot find newly built Binutils assembler (${TARGET_TRIPLE}-as) in PATH" >&2; exit 1
        fi
        echo ">>> New Binutils assembler found: $(command -v ${TARGET_TRIPLE}-as)"

        # --- Build GMP ---
        echo ">>> Building GMP ${GMP_VERSION} (using cross compiler)..."
        cd gmp-${GMP_VERSION}
        # Configure using CROSS compiler because --host is the target machine
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} --build=${BUILD_MACHINE} \
                    --enable-cxx --enable-shared --disable-static \
                    CC="${CROSS_CC}" CXX="${CROSS_CXX}" AR="${CROSS_AR}" RANLIB="${CROSS_RANLIB}" NM="${CROSS_NM}" STRIP="${CROSS_STRIP}" # Use CROSS tools
        make -j${NPROC} && make install || { echo "ERROR: GMP build failed" >&2; exit 1; }
        cd ..
        echo ">>> GMP build complete."

        # --- Build MPFR ---
        echo ">>> Building MPFR ${MPFR_VERSION} (using cross compiler)..."
        cd mpfr-${MPFR_VERSION}
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} --build=${BUILD_MACHINE} \
                    --with-gmp=${INSTALL_PREFIX} --enable-shared --disable-static \
                    CC="${CROSS_CC}" CXX="${CROSS_CXX}" AR="${CROSS_AR}" RANLIB="${CROSS_RANLIB}" NM="${CROSS_NM}" STRIP="${CROSS_STRIP}" # Use CROSS tools
        make -j${NPROC} && make install || { echo "ERROR: MPFR build failed" >&2; exit 1; }
        cd ..
        echo ">>> MPFR build complete."

        # --- Build MPC ---
        echo ">>> Building MPC ${MPC_VERSION} (using cross compiler)..."
        cd mpc-${MPC_VERSION}
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} --build=${BUILD_MACHINE} \
                    --with-gmp=${INSTALL_PREFIX} --with-mpfr=${INSTALL_PREFIX} \
                    --enable-shared --disable-static \
                    CC="${CROSS_CC}" CXX="${CROSS_CXX}" AR="${CROSS_AR}" RANLIB="${CROSS_RANLIB}" NM="${CROSS_NM}" STRIP="${CROSS_STRIP}" # Use CROSS tools
        make -j${NPROC} && make install || { echo "ERROR: MPC build failed" >&2; exit 1; }
        cd ..
        echo ">>> MPC build complete."

        # --- Update LD_LIBRARY_PATH again for this script AND subsequent steps ---
        # Now the actual libraries are installed in ${INSTALL_PREFIX}/${LIB_DIR_NAME}
        export LD_LIBRARY_PATH="${INSTALL_PREFIX}/${LIB_DIR_NAME}:${LD_LIBRARY_PATH}"
        echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo ">>> Updated LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"
        echo ">>> Dependencies build step finished successfully."

    # 7. Build GCC (Cross-Compiled)
    - name: 构建 GCC
      run: |
        #!/bin/bash
        set -e
        echo ">>> Starting build of GCC ${GCC_VERSION}..."
        # PATH and LD_LIBRARY_PATH are inherited from GITHUB_ENV set in step 6
        echo "GCC Build PATH: $PATH"
        echo "GCC Build LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        NPROC=$(nproc)
        echo "Using $NPROC parallel jobs for make."
        if [ -z "$BUILD_MACHINE" ]; then echo "ERROR: BUILD_MACHINE not set." >&2; exit 1; fi
        echo "Build Machine: $BUILD_MACHINE, Host/Target: $TARGET_TRIPLE"

        cd gcc-${GCC_VERSION}
        mkdir -p build && cd build

        # Use tools from the updated PATH (should prioritize ${INSTALL_PREFIX}/bin)
        # Compiler to build GCC itself (cross-compiler)
        export CC="${TOOLCHAIN_TARGET}-clang" CXX="${TOOLCHAIN_TARGET}-clang++"
        # Binutils tools (should be the ones we built)
        export AR="${TARGET_TRIPLE}-ar" RANLIB="${TARGET_TRIPLE}-ranlib"
        export AS="${TARGET_TRIPLE}-as" LD="${TARGET_TRIPLE}-ld"
        export NM="${TARGET_TRIPLE}-nm" STRIP="${TARGET_TRIPLE}-strip"
        # Tools for target libraries (same as above for this config)
        export AR_FOR_TARGET="${AR}" RANLIB_FOR_TARGET="${RANLIB}" AS_FOR_TARGET="${AS}" LD_FOR_TARGET="${LD}"
        export NM_FOR_TARGET="${NM}" STRIP_FOR_TARGET="${STRIP}"
        export OBJDUMP_FOR_TARGET="${TARGET_TRIPLE}-objdump"
        export READELF_FOR_TARGET="${TARGET_TRIPLE}-readelf"
        # Compiler for build machine tools needed during build
        export CC_FOR_BUILD=$(command -v gcc) CXX_FOR_BUILD=$(command -v g++)
        # Flags pointing to dependencies
        export CPPFLAGS="-I${INSTALL_PREFIX}/include"
        export LDFLAGS="-L${INSTALL_PREFIX}/${LIB_DIR_NAME} -Wl,-rpath-link=${INSTALL_PREFIX}/${LIB_DIR_NAME}"

        echo ">>> Configuring GCC..."
        # Verify tools are found correctly before configure
        echo "Using CC for GCC build: $(command -v $CC)"
        echo "Using AS for target: $(command -v $AS_FOR_TARGET)"
        echo "Using LD for target: $(command -v $LD_FOR_TARGET)"
        echo "Using CC_FOR_BUILD: $(command -v $CC_FOR_BUILD)"

        ../configure --target=${TARGET_TRIPLE} --host=${TARGET_TRIPLE} --build=${BUILD_MACHINE} \
                     --prefix=${INSTALL_PREFIX} --with-sysroot=${NDK_SYSROOT} \
                     --with-gmp=${INSTALL_PREFIX} --with-mpfr=${INSTALL_PREFIX} --with-mpc=${INSTALL_PREFIX} \
                     --with-binutils=${INSTALL_PREFIX}/bin --with-native-system-header-dir=/system/usr/include \
                     --enable-languages=c,c++ --enable-shared --disable-static --disable-nls \
                     --disable-bootstrap --disable-multilib --disable-libsanitizer --disable-libssp \
                     --disable-libgomp --disable-libquadmath --disable-libatomic --disable-libvtv \
                     --disable-gold --enable-initfini-array \
                     --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419 \
                     CC="${CC}" CXX="${CXX}" AR="${AR}" RANLIB="${RANLIB}" AS="${AS}" LD="${LD}" NM="${NM}" STRIP="${STRIP}" \
                     AR_FOR_TARGET="${AR_FOR_TARGET}" RANLIB_FOR_TARGET="${RANLIB_FOR_TARGET}" \
                     AS_FOR_TARGET="${AS_FOR_TARGET}" LD_FOR_TARGET="${LD_FOR_TARGET}" \
                     NM_FOR_TARGET="${NM_FOR_TARGET}" STRIP_FOR_TARGET="${STRIP_FOR_TARGET}" \
                     OBJDUMP_FOR_TARGET="${OBJDUMP_FOR_TARGET}" READELF_FOR_TARGET="${READELF_FOR_TARGET}" \
                     CC_FOR_BUILD="${CC_FOR_BUILD}" CXX_FOR_BUILD="${CXX_FOR_BUILD}" \
                     CPPFLAGS="${CPPFLAGS}" LDFLAGS="${LDFLAGS}"

        echo ">>> Running GCC make (this will take a long time)..."
        make -j${NPROC} || { echo "ERROR: GCC make failed" >&2; exit 1; }

        echo ">>> Running GCC make install-strip..."
        make install-strip || { echo "ERROR: GCC make install failed" >&2; exit 1; }

        echo ">>> GCC build and install complete."
        cd ../..
        echo "Checking GCC installation in ${INSTALL_PREFIX}/bin:"
        ls -l ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-gcc || echo "WARNING: GCC compiler might not be installed correctly."
        echo "Checking GCC runtime libraries in ${INSTALL_PREFIX}/${LIB_DIR_NAME}:"
        ls -l ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libstdc++.so* ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libgcc_s.so* || echo "WARNING: GCC runtime libraries might not be installed correctly."

    # 8. Upload Build Artifact (Install Directory)
    - name: 上传构建产物 (install_dir)
      uses: actions/upload-artifact@v4
      with:
        # Artifact name indicating it's the raw install directory
        name: gcc-install-dir-${{ env.TARGET_ARCH }}-${{ env.GCC_VERSION }}
        # Path to the directory to upload
        path: ${{ env.INSTALL_PREFIX }}
        if-no-files-found: error # Fail if the install directory is empty or missing
        retention-days: 7 # Optional: Artifact retention period