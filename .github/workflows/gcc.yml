name: 构建 GCC Magisk 模块

on:
  push:
    branches: [ main ] # 或者你的开发分支
  workflow_dispatch: # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest # 必须使用 Linux 运行环境
    env: # 定义 Job 级别的环境变量，供所有步骤共享
      GCC_VERSION: "12.2.0"
      BINUTILS_VERSION: "2.39"
      GMP_VERSION: "6.2.1"
      MPFR_VERSION: "4.1.0"
      MPC_VERSION: "1.2.1"
      NDK_VERSION: "android-ndk-r25c" # NDK 版本
      TARGET_ARCH: "aarch64"          # 目标架构
      API_LEVEL: "21"                 # Android API Level

    steps:
    - name: 检出代码 (如果你的仓库包含辅助脚本/配置)
      uses: actions/checkout@v3

    - name: 安装基础依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget unzip bc tar xz-utils # 确保解压 .tar.xz 需要的工具存在

    - name: 设置 Android NDK
      id: setup-ndk
      run: |
        echo "正在下载 NDK ${NDK_VERSION}..." # 使用 env 中定义的 NDK_VERSION
        wget -q https://dl.google.com/android/repository/${NDK_VERSION}-linux.zip
        unzip -q ${NDK_VERSION}-linux.zip
        # 将 NDK 路径添加到后续步骤的 GitHub Actions 环境变量
        echo "ANDROID_NDK_HOME=${GITHUB_WORKSPACE}/${NDK_VERSION}" >> $GITHUB_ENV
        echo "NDK 路径: ${GITHUB_WORKSPACE}/${NDK_VERSION}"

    - name: 定义构建特定变量
      id: build-vars
      run: |
        # TARGET_ARCH 和 API_LEVEL 从 job.env 获取
        TARGET_TRIPLE="${TARGET_ARCH}-linux-android"
        # NDK Clang 通常需要 API Level 后缀
        TOOLCHAIN_TARGET="${TARGET_TRIPLE}${API_LEVEL}"
        # 临时安装目录的前缀
        INSTALL_PREFIX="${GITHUB_WORKSPACE}/install_dir"
        # Magisk 模块目录
        MODULE_DIR="${GITHUB_WORKSPACE}/gcc_magisk_module"
        # 根据架构确定库目录名
        if [ "${TARGET_ARCH}" == "aarch64" ] || [ "${TARGET_ARCH}" == "x86_64" ]; then
          LIB_DIR_NAME="lib64"
        else
          LIB_DIR_NAME="lib"
        fi

        # 将这些变量写入 GitHub Actions 环境变量供后续步骤使用
        echo "TARGET_TRIPLE=${TARGET_TRIPLE}" >> $GITHUB_ENV
        echo "TOOLCHAIN_TARGET=${TOOLCHAIN_TARGET}" >> $GITHUB_ENV
        echo "INSTALL_PREFIX=${INSTALL_PREFIX}" >> $GITHUB_ENV
        echo "MODULE_DIR=${MODULE_DIR}" >> $GITHUB_ENV
        echo "LIB_DIR_NAME=${LIB_DIR_NAME}" >> $GITHUB_ENV # 将库目录名也设为环境变量
        # 将 NDK 工具链添加到全局 PATH 环境变量 (主要影响后续步骤)
        echo "PATH=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}" >> $GITHUB_ENV

        # 创建所需目录
        mkdir -p $INSTALL_PREFIX
        mkdir -p $MODULE_DIR
        echo "构建变量设置完成。"
        echo "INSTALL_PREFIX=${INSTALL_PREFIX}"
        echo "MODULE_DIR=${MODULE_DIR}"
        echo "TARGET_TRIPLE=${TARGET_TRIPLE}"
        echo "TOOLCHAIN_TARGET=${TOOLCHAIN_TARGET}"
        echo "LIB_DIR_NAME=${LIB_DIR_NAME}"

    - name: 下载源代码 (使用 env 中的版本号)
      run: |
        echo "正在下载源码..."
        echo "GCC Version: ${GCC_VERSION}"
        echo "Binutils Version: ${BINUTILS_VERSION}"
        echo "GMP Version: ${GMP_VERSION}"
        echo "MPFR Version: ${MPFR_VERSION}"
        echo "MPC Version: ${MPC_VERSION}"
        wget -q https://ftp.gnu.org/gnu/gcc/gcc-${GCC_VERSION}/gcc-${GCC_VERSION}.tar.gz
        wget -q https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VERSION}.tar.gz
        wget -q https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VERSION}.tar.xz
        wget -q https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VERSION}.tar.xz
        wget -q https://ftp.gnu.org/gnu/mpc/mpc-${MPC_VERSION}.tar.gz
        echo "下载完成，正在解压..."
        tar -xf gcc-${GCC_VERSION}.tar.gz
        tar -xf binutils-${BINUTILS_VERSION}.tar.gz
        tar -xf gmp-${GMP_VERSION}.tar.xz
        tar -xf mpfr-${MPFR_VERSION}.tar.xz
        tar -xf mpc-${MPC_VERSION}.tar.gz
        echo "解压完成。"
        echo "当前工作目录内容 (下载后):"
        ls -l # 列出文件以确认解压成功

    - name: 构建依赖项 (Binutils, GMP, MPFR, MPC)
      # 在脚本内部更新 PATH, 使用 llvm-* 工具名导出变量
      run: |
        echo "开始构建依赖项..."
        # 显式地将 NDK bin 目录添加到此脚本环境的 PATH 开头
        export PATH="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${PATH}"
        echo "Updated PATH for dependency build: $PATH"
        echo "Current work dir: $(pwd)"
        ls -l # 确认源码目录存在

        # --- 构建 Binutils ---
        echo "构建 Binutils (版本: ${BINUTILS_VERSION})..."
        cd binutils-${BINUTILS_VERSION}
        # 导出变量，使用 llvm-* 工具名
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
        # --- 添加检查 ---
        echo "Checking AR tool for Binutils:"
        ls -l "$AR"
        "$AR" --version || echo "AR version check failed"
        # ---------------
        echo "AR is: $AR"

        # 执行 configure
        ./configure --target=${TARGET_TRIPLE} --prefix=${INSTALL_PREFIX} \
                    --host=${TARGET_TRIPLE} \
                    --with-sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                    --disable-nls --disable-werror \
                    --disable-static --enable-shared # 动态链接

        echo "运行 Binutils configure 完成。准备 make (已注释掉)..."
        # !! 取消注释前，请确认 configure 成功完成 (检查 config.log) !!
        # make -j$(nproc)
        # make install
        echo "跳过 Binutils make & make install (占位符)"
        cd ..

        # --- 构建 GMP ---
        echo "构建 GMP (版本: ${GMP_VERSION})..."
        cd gmp-${GMP_VERSION}
        # 导出变量
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"

        # 执行 configure
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} \
                     --enable-cxx \
                     --disable-static --enable-shared # 动态链接

        echo "运行 GMP configure 完成。准备 make (已注释掉)..."
        # !! 取消注释前，请确认 configure 成功完成 (检查 config.log) !!
        # make -j$(nproc)
        # make install
        echo "跳过 GMP configure & make (占位符)"
        cd ..

        # --- 构建 MPFR ---
        echo "构建 MPFR (版本: ${MPFR_VERSION})..."
        cd mpfr-${MPFR_VERSION}
        # 导出变量
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
        # --- 添加检查 ---
        echo "Checking AR tool for MPFR:"
        ls -l "$AR"
        "$AR" --version || echo "AR version check failed"
        # ---------------
        echo "AR for MPFR is: $AR"

        # 执行 configure
        # 注意: --with-gmp 依赖于上一步 GMP 的 make install 被执行
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} \
                    --with-gmp=${INSTALL_PREFIX} \
                    --disable-static --enable-shared # 动态链接

        echo "运行 MPFR configure 完成。准备 make (已注释掉)..."
        # !! 取消注释前，请确认 configure 成功完成 (检查 config.log) !!
        # !! 并且确认 GMP 已成功安装到 ${INSTALL_PREFIX} !!
        # make -j$(nproc)
        # make install
        echo "跳过 MPFR configure & make (占位符)"
        cd ..

        # --- 构建 MPC ---
        echo "构建 MPC (版本: ${MPC_VERSION})..."
        cd mpc-${MPC_VERSION}
        # 导出变量
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"

        # 执行 configure
        # 注意: --with-gmp 和 --with-mpfr 依赖于前两步的 make install 被执行
        ./configure --prefix=${INSTALL_PREFIX} --host=${TARGET_TRIPLE} \
                    --with-gmp=${INSTALL_PREFIX} \
                    --with-mpfr=${INSTALL_PREFIX} \
                    --disable-static --enable-shared # 动态链接

        echo "运行 MPC configure 完成。准备 make (已注释掉)..."
        # !! 取消注释前，请确认 configure 成功完成 (检查 config.log) !!
        # !! 并且确认 GMP 和 MPFR 已成功安装到 ${INSTALL_PREFIX} !!
        # make -j$(nproc)
        # make install
        echo "跳过 MPC configure & make (占位符)"
        cd ..

        # 添加安装路径到全局环境，供后续步骤（如构建 GCC）使用
        echo "PATH=${INSTALL_PREFIX}/bin:${PATH}" >> $GITHUB_ENV
        # 设置 LD_LIBRARY_PATH 指向安装的库目录
        echo "LD_LIBRARY_PATH=${INSTALL_PREFIX}/${LIB_DIR_NAME}:${LD_LIBRARY_PATH}" >> $GITHUB_ENV
        echo "依赖项构建步骤完成 (大部分跳过)。"

    - name: 构建 GCC
      # 在脚本内部更新 PATH, 使用 llvm-* 工具名导出变量
      run: |
        echo "开始构建 GCC (版本: ${GCC_VERSION})..."
        # 显式地将 NDK bin 和 依赖安装 bin 目录添加到此脚本环境的 PATH 开头
        export PATH="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin:${INSTALL_PREFIX}/bin:${PATH}"
        echo "Updated PATH for GCC build: $PATH"
        cd gcc-${GCC_VERSION}

        # 导出变量
        export CC="${TOOLCHAIN_TARGET}-clang"
        export CXX="${TOOLCHAIN_TARGET}-clang++"
        export AR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
        export RANLIB="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib"
        export STRIP="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
        # NM 工具可能也需要指定
        export NM="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-nm"
        # LDFLAGS 指向安装的库目录
        export LDFLAGS="-L${INSTALL_PREFIX}/${LIB_DIR_NAME}"
        # CPPFLAGS 指向安装的头文件目录
        export CPPFLAGS="-I${INSTALL_PREFIX}/include"
        echo "CPPFLAGS for GCC: $CPPFLAGS"
        echo "LDFLAGS for GCC: $LDFLAGS"
        # --- 添加检查 ---
        echo "Checking NM tool for GCC:"
        ls -l "$NM"
        "$NM" --version || echo "NM version check failed"
        # ---------------

        # 执行 configure (这部分参数仍然需要根据实际错误进行大量调试)
        # 注意: --with-gmp, --with-mpfr, --with-mpc 依赖于依赖项的 make install 被执行
        ./configure --target=${TARGET_TRIPLE} --prefix=${INSTALL_PREFIX} \
                    --host=${TARGET_TRIPLE} \
                    --build=$(./config.guess) \
                    --with-sysroot=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \
                    --with-gmp=${INSTALL_PREFIX} \
                    --with-mpfr=${INSTALL_PREFIX} \
                    --with-mpc=${INSTALL_PREFIX} \
                    --enable-languages=c,c++ \
                    --disable-nls \
                    --disable-libssp \
                    --disable-libgomp \
                    --disable-libquadmath \
                    --disable-bootstrap \ # 尝试禁用 bootstrap 以加快速度 (可能引入问题)
                    --disable-multilib \ # Android 通常不需要
                    --disable-static --enable-shared # 动态链接

        echo "运行 GCC configure 完成。准备 make (已注释掉)..."
        # !! 取消注释前，请确认 configure 成功完成 (检查 config.log) !!
        # !! 并且确认所有依赖项已成功安装到 ${INSTALL_PREFIX} !!
        # make -j$(nproc) # 这会非常非常耗时
        # make install
        echo "跳过 GCC make & make install (占位符)"
        cd ..
        echo "GCC 构建步骤完成 (跳过)。"

    - name: 创建 Magisk 模块结构
      run: |
        echo "创建 Magisk 模块结构..."
        MODULE_ID="gcc-cross-android-${TARGET_ARCH}"
        MODULE_NAME="GCC for Android (${TARGET_ARCH})"
        MODULE_VERSION="v${GCC_VERSION}"
        MODULE_AUTHOR="GitHub Actions CI" # 或者你的名字

        # 创建目录结构
        mkdir -p ${MODULE_DIR}/system/bin
        mkdir -p ${MODULE_DIR}/system/${LIB_DIR_NAME} # 使用之前确定的库目录名
        mkdir -p ${MODULE_DIR}/system/libexec/gcc/${TARGET_TRIPLE}/${GCC_VERSION}
        mkdir -p ${MODULE_DIR}/META-INF/com/google/android

        echo "复制文件 (占位符 - 需要实际构建完成)..."
        # 复制主要可执行文件
        cp -fv ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-gcc ${MODULE_DIR}/system/bin/gcc || echo "警告: ${TARGET_TRIPLE}-gcc 未找到"
        cp -fv ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-g++ ${MODULE_DIR}/system/bin/g++ || echo "警告: ${TARGET_TRIPLE}-g++ 未找到"
        cp -fv ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-cpp ${MODULE_DIR}/system/bin/cpp || echo "警告: ${TARGET_TRIPLE}-cpp 未找到"
        # 复制 llvm-ar 等工具 (如果需要的话，改名为 target-prefixed name)
        # cp -fv ${INSTALL_PREFIX}/bin/llvm-ar ${MODULE_DIR}/system/bin/${TARGET_TRIPLE}-ar || echo "警告: llvm-ar 未找到" # 示例
        cp -fv ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-as ${MODULE_DIR}/system/bin/as || echo "警告: ${TARGET_TRIPLE}-as 未找到" # Binutils 提供的
        cp -fv ${INSTALL_PREFIX}/bin/${TARGET_TRIPLE}-ld ${MODULE_DIR}/system/bin/ld || echo "警告: ${TARGET_TRIPLE}-ld 未找到" # Binutils 提供的

        # 复制 GCC 内部工具
        cp -rfv ${INSTALL_PREFIX}/libexec/gcc/${TARGET_TRIPLE}/${GCC_VERSION}/* ${MODULE_DIR}/system/libexec/gcc/${TARGET_TRIPLE}/${GCC_VERSION}/ || echo "警告: GCC libexec 文件未找到"
        # 复制动态库 (如果采用动态链接)
        cp -fv ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libstdc++.so* ${MODULE_DIR}/system/${LIB_DIR_NAME}/ || echo "警告: libstdc++.so 未找到"
        cp -fv ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libgcc_s.so* ${MODULE_DIR}/system/${LIB_DIR_NAME}/ || echo "警告: libgcc_s.so 未找到"
        cp -fv ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libgmp.so* ${MODULE_DIR}/system/${LIB_DIR_NAME}/ || echo "警告: libgmp.so 未找到"
        cp -fv ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libmpfr.so* ${MODULE_DIR}/system/${LIB_DIR_NAME}/ || echo "警告: libmpfr.so 未找到"
        cp -fv ${INSTALL_PREFIX}/${LIB_DIR_NAME}/libmpc.so* ${MODULE_DIR}/system/${LIB_DIR_NAME}/ || echo "警告: libmpc.so 未找到"

        # 创建 module.prop 文件
        echo "创建 module.prop..."
        echo "id=${MODULE_ID}" > ${MODULE_DIR}/module.prop
        echo "name=${MODULE_NAME}" >> ${MODULE_DIR}/module.prop
        echo "version=${MODULE_VERSION}" >> ${MODULE_DIR}/module.prop
        safe_version_code=$(echo $GCC_VERSION | tr -d '.' | cut -c -9)0
        echo "versionCode=${safe_version_code}" >> ${MODULE_DIR}/module.prop
        echo "author=${MODULE_AUTHOR}" >> ${MODULE_DIR}/module.prop
        echo "description=为 Android ${TARGET_ARCH} 交叉编译的 GCC ${GCC_VERSION} (构建未完成)" >> ${MODULE_DIR}/module.prop
        echo "arch=${TARGET_ARCH}" >> ${MODULE_DIR}/module.prop

        # 创建 META-INF 文件
        echo "创建 META-INF 文件..."
        echo '#!/sbin/sh' > ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo '# 安装脚本 (占位符)' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print("- 安装 ${MODULE_NAME}")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print("- 版本: ${MODULE_VERSION}")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print("- 架构: ${TARGET_ARCH}")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print(" ")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print("********************************************************")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print("* 注意: 这可能是一个占位符模块，实际构建可能未完成 *")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'ui_print("********************************************************")' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        echo 'exit 0' >> ${MODULE_DIR}/META-INF/com/google/android/update-binary
        chmod 755 ${MODULE_DIR}/META-INF/com/google/android/update-binary
        touch ${MODULE_DIR}/META-INF/com/google/android/updater-script
        echo "模块结构创建完成。"

    - name: 打包模块为 Zip 文件
      run: |
        echo "开始打包 Zip 文件..."
        cd ${MODULE_DIR}
        zip -r9 ${GITHUB_WORKSPACE}/gcc-magisk-module-${TARGET_ARCH}.zip .
        cd ${GITHUB_WORKSPACE}
        echo "Zip 文件打包完成: gcc-magisk-module-${TARGET_ARCH}.zip"

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: gcc-magisk-module-${{ env.TARGET_ARCH }}
        path: ${{ github.workspace }}/gcc-magisk-module-${{ env.TARGET_ARCH }}.zip
        if-no-files-found: error # 如果 zip 文件没找到则报错